{"version":3,"sources":["redux/contacts/contactActions.js","components/contactForm/ContactFormStyled.js","components/contactForm/ContactForm.js","components/contactList/contactListItem/ContactListItemStyled.js","components/contactList/contactListItem/ContactListItem.js","components/contactList/ContactList.js","components/filter/FilterStyled.js","components/filter/Filter.js","components/section/SectionStyled.js","components/section/Section.js","App.js","redux/contacts/contactReducer.js","redux/store.js","index.js"],"names":["addContact","createAction","deleteContact","setFilter","ContactFormStyled","styled","div","ContactForm","state","name","number","handleInputChange","event","currentTarget","value","setState","onHandleSubmit","e","preventDefault","contact","id","uuidv4","props","contacts","find","toLowerCase","alert","onSubmit","this","onChange","type","className","pattern","title","required","Component","connect","items","ContactListItemStyled","ContactListItem","onDeleteContact","onClick","filter","includes","map","FilterStyled","mapDispatchToProps","target","SectionStyled","section","Section","children","toUpperCase","App","contactItemReducer","createReducer","action","payload","item","filterReducer","_","contactReducer","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.1e277dbf.chunk.js","sourcesContent":["// ====== toolkit =======\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"contacts/addContact\");\nexport const deleteContact = createAction(\"contacts/deleteContact\");\nexport const setFilter = createAction(\"contacts/setFilter\");\n\n//======= redux =========\n\n// const ADD_CONTACT = \"addContact\";\n// const DELETE_CONTACT_BY_ID = \"deleteContact\";\n// const SET_FILTER = \"setFilter\";\n\n// export { ADD_CONTACT, DELETE_CONTACT_BY_ID, SET_FILTER };\n\n// export const addContact = (contact) => ({\n//   type: ADD_CONTACT,\n//   payload: contact,\n// });\n// export const deleteContact = (id) => ({\n//   type: DELETE_CONTACT_BY_ID,\n//   payload: id,\n// });\n// export const setFilter = (value) => ({\n//   type: SET_FILTER,\n//   payload: value,\n// });\n","import styled from \"styled-components\";\n\nexport const ContactFormStyled = styled.div`\n  padding: 25px 15px;\n  margin: 10px;\n  border: 1px solid;\n  border-radius: 5px;\n  width: 400px;\n  .inputName {\n    margin-top: 10px;\n    margin-bottom: 10px;\n    display: block;\n  }\n  .btnAdd {\n    display: block;\n    margin-top: 30px;\n    padding: 3px 5px;\n    border-radius: 6px;\n    cursor: pointer;\n    background-color: transparent;\n    &:hover {\n      background-color: cornflowerblue;\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { addContact } from \"../../redux/contacts/contactActions\";\nimport { ContactFormStyled } from \"./ContactFormStyled\";\n\nclass ContactForm extends Component {\n  state = { name: \"\", number: \"\" };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  onHandleSubmit = (e) => {\n    e.preventDefault();\n\n    const contact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n\n    const sameContact = this.props.contacts.find(\n      (contact) => contact.name.toLowerCase() === this.state.name.toLowerCase()\n    );\n    if (sameContact) {\n      return alert(`${this.state.name} is already exists in the Phonebook`);\n    }\n\n    this.props.addContact(contact);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <ContactFormStyled>\n        <form onSubmit={this.onHandleSubmit}>\n          <label>\n            Name\n            <input\n              value={this.state.name}\n              onChange={this.handleInputChange}\n              type=\"text\"\n              name=\"name\"\n              className=\"inputName\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т.п.\"\n              required\n            />\n            <input\n              type=\"tel\"\n              name=\"number\"\n              className=\"inputName\"\n              value={this.state.number}\n              onChange={this.handleInputChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять из цифр, может содержать пробелы, тире, круглые скобки и начинаться с +\"\n              required\n            />\n          </label>\n          <button type=\"submit\" className=\"btnAdd\">\n            Add contact\n          </button>\n        </form>\n      </ContactFormStyled>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  // filter: state.contacts.filter,\n});\n\nexport default connect(mapStateToProps, { addContact })(ContactForm);\n","import styled from \"styled-components\";\n\nexport const ContactListItemStyled = styled.div`\n  .btnDelete {\n    padding: 3px;\n    margin: 7px 12px;\n    border-radius: 6px;\n    background-color: transparent;\n    cursor: pointer;\n    &:hover {\n      background-color: cornflowerblue;\n    }\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ContactListItemStyled } from \"./ContactListItemStyled\";\n\nconst ContactListItem = ({ name, number, id, onDeleteContact }) => {\n  const onDeleteItem = () => {\n    onDeleteContact(id);\n  };\n\n  return (\n    <ContactListItemStyled>\n      <li>\n        {name}\n        <span>: </span>\n        {number}\n        <button className=\"btnDelete\" type=\"button\" onClick={onDeleteItem}>\n          Delete\n        </button>\n      </li>\n    </ContactListItemStyled>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactListItem from \"./contactListItem/ContactListItem\";\nimport { connect } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/contactActions\";\n\nconst ContactList = ({ contacts, filter, onDeleteContact }) => {\n  return (\n    <ol>\n      {contacts\n        .filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase()))\n        .map((contact) => (\n          <ContactListItem key={contact.id} {...contact} onDeleteContact={onDeleteContact} />\n        ))}\n    </ol>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  filter: PropTypes.string,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nexport default connect(mapStateToProps, { onDeleteContact: deleteContact })(ContactList);\n","import styled from \"styled-components\";\n\nexport const FilterStyled = styled.div`\n  margin-left: 10px;\n  .inputFilter {\n    margin-top: 15px;\n    margin-bottom: 15px;\n    display: block;\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FilterStyled } from \"./FilterStyled\";\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../../redux/contacts/contactActions\";\n\nconst Filter = ({ setFilter, filter }) => {\n  return (\n    <FilterStyled>\n      <label className=\"labelFilter\">\n        Find contacts by name:\n        <input\n          className=\"inputFilter\"\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n        />\n      </label>\n    </FilterStyled>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: state.filter,\n});\n\n// const mapDispatchToProps = (dispatch) => ({\n//   handleInputChange: (e) => dispatch(setFilter(e.target.value)),\n// });\n\nconst mapDispatchToProps = {\n  setFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  setFilter: PropTypes.func.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const SectionStyled = styled.section`\n  .sectionTitle {\n    color: cornflowerblue;\n    margin: 20px;\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SectionStyled } from \"./SectionStyled\";\n\nconst Section = ({ children, title }) => {\n  return (\n    <SectionStyled>\n      <h2 className=\"sectionTitle\">{title.toUpperCase()}</h2>\n      {children}\n    </SectionStyled>\n  );\n};\n\nSection.propTypes = {\n  children: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\nimport Section from \"./components/section/Section\";\n\nconst App = () => {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Filter />\n      <Section title=\"Contacts\">\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","// ====== toolkit =======\nimport { combineReducers, createReducer } from \"@reduxjs/toolkit\";\nimport { addContact, deleteContact, setFilter } from \"./contactActions\";\n\nconst contactItemReducer = createReducer([], {\n  [addContact]: (state, action) => [...state, action.payload],\n  [deleteContact]: (state, action) => state.filter((item) => item.id !== action.payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [setFilter]: (_, action) => action.payload,\n});\n\nconst contactReducer = combineReducers({\n  items: contactItemReducer,\n  filter: filterReducer,\n});\n\nexport default contactReducer;\n//======= redux =========\n// import { combineReducers } from \"redux\";\n// import { ADD_CONTACT, DELETE_CONTACT_BY_ID, SET_FILTER } from \"./contactActions\";\n\n// const contactItemReducer = (state = [], action) => {\n//   switch (action.type) {\n//     case ADD_CONTACT:\n//       return [...state, action.payload];\n\n//     case DELETE_CONTACT_BY_ID:\n//       return state.filter((item) => item.id !== action.payload);\n\n//     default:\n//       return state;\n//   }\n// };\n// const filterReducer = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case SET_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const contactReducer = combineReducers({\n//   contacts: contactItemReducer,\n//   filter: filterReducer,\n// });\n\n// export default contactReducer;\n","// ====== toolkit =======\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactReducer from \"./contacts/contactReducer\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: { contacts: persistReducer(persistConfig, contactReducer) },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport const persistor = persistStore(store);\n\n// const store = configureStore({ reducer: contactReducer });\n\nexport default store;\n\n//========= redux =======//\n\n// import { createStore } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import contactReducer from \"./contacts/contactReducer\";\n\n// // const reducer = (state = {}, action) => state;\n\n// const store = createStore(contactReducer, composeWithDevTools());\n\n// export default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport store, { persistor } from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />,\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}